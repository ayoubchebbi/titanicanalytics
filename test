public static void handlePatientMainAddressChange(List<Schema.Address> addressList) {
    Map<Id, Schema.Address> addressMap = new Map<Id, Schema.Address>();
    Set<Id> relatedAccountIds = new Set<Id>();
    
    for (Schema.Address addr : addressList) {
        if (addr.ACCCO_RelatedAccount__c != null) {
            addressMap.put(addr.Id, addr);
            relatedAccountIds.add(addr.ACCCO_RelatedAccount__c);
        }
    }
    
    if (relatedAccountIds.isEmpty()) {
        return;
    }
    
    Map<Id, Account> accountMap = new Map<Id, Account>([
        SELECT Id, RecordType.DeveloperName
        FROM Account 
        WHERE Id IN :relatedAccountIds
        AND RecordType.DeveloperName = 'PASCO-Patient'
    ]);
    
    if (accountMap.isEmpty()) {
        return;
    }
    
    Set<Id> validAccountIds = new Set<Id>();
    for (Schema.Address addr : addressMap.values()) {
        Account relatedAccount = accountMap.get(addr.ACCCO_RelatedAccount__c);
        
        if (relatedAccount != null && 
            relatedAccount.RecordType.DeveloperName == 'PASCO-Patient' &&
            addr.CTCCO_MainAddress__c == false) {
            
            validAccountIds.add(relatedAccount.Id);
        }
    }
    
    if (validAccountIds.isEmpty()) {
        return;
    }
    
    List<PASCO_Therapy__c> therapiesList = [
        SELECT Id, PASCO_Patient__c, PASCO_TherapyGroup__c
        FROM PASCO_Therapy__c
        WHERE PASCO_Patient__c IN :validAccountIds
    ];
    
    if (!therapiesList.isEmpty()) {
        System.enqueueJob(new FSCO_AssignClosestPOSToTherapies_QBL(therapiesList));
    }
}
