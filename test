import { LightningElement, api, wire, track } from 'lwc';
import { gql, graphql } from 'lightning/uiGraphQLApi';
import {
    prepareSA
} from './fscoDeliveryPlanDaySuggesterItemHelper';

export default class FscoDeliveryPlanDaySuggesterItem extends LightningElement {
    @api stId;
    errorMessage = '';
    hasError = false;
    @track serviceAppointments = [];
    @track weeklyData = [];
    @track columns = [];
    currentDate = new Date();

    connectedCallback() {
        this.initializeColumns();
    }

    initializeColumns() {
        this.columns = [
            { label: '', fieldName: 'dayOfWeek', type: 'text' },
            { label: 'Week 1', fieldName: 'week1', type: 'number' },
            { label: 'Week 2', fieldName: 'week2', type: 'number' },
            { label: 'Week 3', fieldName: 'week3', type: 'number' },
            { label: 'Week 4', fieldName: 'week4', type: 'number' },
            { label: 'Total', fieldName: 'total', type: 'number' }
        ];

        // Initialize weekly data structure
        const days = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];
        this.weeklyData = days.map(day => {
            return {
                dayOfWeek: day,
                week1: 0,
                week2: 0,
                week3: 0,
                week4: 0,
                total: 0
            };
        });
    }

    @wire(graphql, {
        query: '$querySA',
        variables: '$variables'
    })
    wiredServiceAppointments({ data, errors }) {
        if (data) {
            this.serviceAppointments = [];
            const _serviceAppointments = data.uiapi.query.ServiceAppointment?.edges || [];
            
            _serviceAppointments.forEach(el => {
                const sa = prepareSA(el);
                
                // Vérifier la date du plan de livraison
                if (sa.deliveryPlan && sa.deliveryPlan.OSMCO_StarDate) {
                    const startDate = new Date(sa.deliveryPlan.OSMCO_StarDate);
                    const diffWeeks = this.calculateWeekDifference(startDate, this.currentDate);
                    
                    // Ajouter uniquement si la date est dans les 4 semaines
                    if (diffWeeks <= 4) {
                        this.serviceAppointments.push(sa);
                        
                        // Mettre à jour les données hebdomadaires
                        this.updateWeeklyData(startDate, sa);
                    }
                }
            });
            
            // Calculer les totaux
            this.calculateTotals();
        }
        
        if (errors) {
            this.addError(true, `Erreur GraphQL : ${errors.map(error => error.message).join(', ')}`);
        }
    }

    updateWeeklyData(startDate, sa) {
        // Déterminer le jour de la semaine (0 = Dimanche, 1 = Lundi, etc.)
        const dayOfWeek = startDate.getDay();
        const dayIndex = dayOfWeek === 0 ? 6 : dayOfWeek - 1; // Convertir en index 0-5 pour Lundi-Samedi
        
        // Déterminer la semaine (1-4) par rapport à aujourd'hui
        const weekDiff = this.calculateWeekDifference(startDate, this.currentDate);
        
        if (weekDiff >= 1 && weekDiff <= 4) {
            const weekKey = `week${weekDiff}`;
            this.weeklyData[dayIndex][weekKey] += 1;
        }
    }

    calculateWeekDifference(date1, date2) {
        const oneWeek = 7 * 24 * 60 * 60 * 1000;
        const diffDays = Math.round(Math.abs((date1 - date2) / oneWeek));
        return diffDays + 1; // Ajouter 1 pour inclure la semaine en cours
    }

    calculateTotals() {
        this.weeklyData.forEach(day => {
            day.total = day.week1 + day.week2 + day.week3 + day.week4;
        });
    }

    addError(hasError, errorMessage) {
        this.hasError = hasError;
        this.errorMessage = errorMessage;
    }

    get querySA() {
        return gql`
        query GetServiceAppointment($stId: ID) {
            uiapi {
                query {
                    ServiceAppointment(
                        where: { 
                            ServiceTerritoryId: { eq: $stId },
                            Status: { ne: "Canceled" },
                            Status: { ne: "Cannot Complete" },
                            TEKCO_DeliveryPlanId__c: { ne: null }
                        }
                    ) {
                        edges {
                            node {
                                Id
                                Status {
                                    value
                                }
                                TEKCO_DeliveryPlanId__c {
                                    value
                                    ... on Lookup {
                                        displayValue
                                        OSMCO_StarDate {
                                            value
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }`;
    }

    get variables() {
        return {
            stId: this.stId
        };
    }
}









export function prepareSA(serviceAppointmentEdge) {
    const node = serviceAppointmentEdge.node;
    
    return {
        id: node.Id,
        status: node.Status?.value,
        deliveryPlanId: node.TEKCO_DeliveryPlanId__c?.value,
        deliveryPlan: {
            name: node.TEKCO_DeliveryPlanId__c?.displayValue,
            OSMCO_StarDate: node.TEKCO_DeliveryPlanId__c?.OSMCO_StarDate?.value
        }
    };
}









<template>
    <div class="slds-m-around_medium">
        <template if:true={hasError}>
            <div class="slds-notify slds-notify_alert slds-alert_error" role="alert">
                <span class="slds-assistive-text">Erreur</span>
                <h2>{errorMessage}</h2>
            </div>
        </template>
        
        <div class="slds-m-top_medium">
            <h2 class="slds-text-heading_medium slds-m-bottom_small">
                Plan de livraison - Aperçu des 4 prochaines semaines
            </h2>
            
            <lightning-datatable
                key-field="dayOfWeek"
                data={weeklyData}
                columns={columns}
                hide-checkbox-column
            >
            </lightning-datatable>
        </div>
    </div>
</template>
