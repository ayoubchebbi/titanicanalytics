// GraphQL query for Service Appointments with date range and name conditions
import { gql } from 'lightning/uiGraphQLApi';

// Method 1: Using GraphQL with date range
export const GET_SERVICE_APPOINTMENTS = gql`
  query getServiceAppointments($startDate: Date!, $endDate: Date!) {
    uiapi {
      query {
        ServiceAppointment(
          where: {
            and: [
              { EarliestStartTime: { range: { gt: $startDate, lt: $endDate } } }
              { Name: { ne: null } }
            ]
          }
        ) {
          edges {
            node {
              Id
              Name {
                value
              }
              EarliestStartTime {
                value
              }
              Status {
                value
              }
              Subject {
                value
              }
              # Add other fields you need
            }
          }
        }
      }
    }
  }
`;

// In your LWC JavaScript file
import { LightningElement, wire } from 'lwc/core';
import { graphql } from 'lightning/uiGraphQLApi';

export default class ServiceAppointmentList extends LightningElement {
    // Calculate date range (today to today + 8 days)
    get dateRange() {
        const today = new Date();
        const endDate = new Date();
        endDate.setDate(today.getDate() + 8);
        
        return {
            startDate: today.toISOString().split('T')[0], // YYYY-MM-DD format
            endDate: endDate.toISOString().split('T')[0]
        };
    }

    // Using @wire with GraphQL
    @wire(graphql, {
        query: GET_SERVICE_APPOINTMENTS,
        variables: '$dateRange'
    })
    serviceAppointments;

    // Alternative: Using imperative call
    async fetchServiceAppointments() {
        try {
            const result = await graphql({
                query: GET_SERVICE_APPOINTMENTS,
                variables: this.dateRange
            });
            
            if (result.data) {
                this.serviceAppointments = result.data.uiapi.query.ServiceAppointment.edges;
            }
        } catch (error) {
            console.error('Error fetching service appointments:', error);
        }
    }

    connectedCallback() {
        // Call the method if using imperative approach
        // this.fetchServiceAppointments();
    }
}

// Alternative GraphQL query with more specific date filtering
export const GET_SERVICE_APPOINTMENTS_ALT = gql`
  query getServiceAppointmentsInRange {
    uiapi {
      query {
        ServiceAppointment(
          where: {
            and: [
              { 
                EarliestStartTime: { 
                  range: { 
                    gte: { literal: "TODAY" }
                    lte: { literal: "TODAY+8" }
                  } 
                } 
              }
              { Name: { ne: null } }
            ]
          }
          orderBy: { EarliestStartTime: { order: ASC } }
        ) {
          edges {
            node {
              Id
              Name {
                value
              }
              EarliestStartTime {
                value
                displayValue
              }
              Status {
                value
                displayValue
              }
              AppointmentNumber {
                value
              }
              Duration {
                value
              }
            }
          }
        }
      }
    }
  }
`;

// Using SOQL-style date literals (if your org supports it)
export const GET_SERVICE_APPOINTMENTS_SOQL_STYLE = gql`
  query getServiceAppointmentsSOQLStyle {
    uiapi {
      query {
        ServiceAppointment(
          where: {
            and: [
              { EarliestStartTime: { gte: { literal: "TODAY" } } }
              { EarliestStartTime: { lte: { literal: "NEXT_N_DAYS:8" } } }
              { Name: { ne: null } }
            ]
          }
        ) {
          edges {
            node {
              Id
              Name { value }
              EarliestStartTime { value }
              Status { value }
            }
          }
        }
      }
    }
  }
`;
