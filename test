export default class FscoDeliveryPlanDaySuggester extends LightningElement {
    serviceAppointments = [];
    error;
    loading = true;
    serviceTerritoryId;

    // Première requête pour récupérer l'ID du ServiceTerritory
    @wire(graphql, {
        query: gql`
            query.GetServiceTerritory($recordId: ID) {
                uiapi {
                    query {
                        OSMCO_DeliveryPlan__c(where: { Id: { eq: $recordId } }) {
                            edges {
                                node {
                                    Id
                                    FMCO_Address__r {
                                        Id
                                        TEKO_ServiceTerritory__r {
                                            Id
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        `,
        variables: '$variables'
    })
    wireServiceTerritory({ data, errors }) {
        if (data) {
            const plan = data.uiapi.query.OSMCO_DeliveryPlan__c.edges[0]?.node;
            if (plan && plan.FMCO_Address__r && plan.FMCO_Address__r.TEKO_ServiceTerritory__r) {
                this.serviceTerritoryId = plan.FMCO_Address__r.TEKO_ServiceTerritory__r.Id;
                // Déclencher la seconde requête ici si nécessaire
                this.getServiceAppointments();
            }
        } else if (errors) {
            this.error = errors;
        }
    }

    // Méthode pour récupérer les Service Appointments avec l'ID du ServiceTerritory
    getServiceAppointments() {
        if (this.serviceTerritoryId) {
            const variables = {
                serviceTerritoryId: this.serviceTerritoryId
            };
            
            // Utilisez graphql.query ou une méthode imperative pour faire la seconde requête
            graphql.query({
                query: gql`
                    query GetServiceAppointments($serviceTerritoryId: ID) {
                        uiapi {
                            query {
                                ServiceAppointment(where: { ServiceTerritoryId: { eq: $serviceTerritoryId } }) {
                                    edges {
                                        node {
                                            Id
                                            // Autres champs des SA dont vous avez besoin
                                        }
                                    }
                                }
                            }
                        }
                    }
                `,
                variables: variables
            })
            .then(result => {
                if (result.data) {
                    this.serviceAppointments = result.data.uiapi.query.ServiceAppointment.edges.map(edge => edge.node);
                    this.loading = false;
                }
            })
            .catch(error => {
                this.error = error;
                this.loading = false;
            });
        }
    }
}


@wire(graphql, {
    query: gql`
        query.GetServiceAppointments($recordId: ID) {
            uiapi {
                query {
                    OSMCO_DeliveryPlan__c(where: { Id: { eq: $recordId } }) {
                        edges {
                            node {
                                Id
                                FMCO_Address__r {
                                    Id
                                    TEKO_ServiceTerritory__r {
                                        Id
                                        // Requête directe des SA liées au ServiceTerritory
                                        ServiceAppointments {
                                            edges {
                                                node {
                                                    Id
                                                    // Autres champs des SA
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    `,
    variables: '$variables'
})
wireServiceAppointments({ data, errors }) {
    this.loading = false;
    if (data) {
        const plan = data.uiapi.query.OSMCO_DeliveryPlan__c.edges[0]?.node;
        if (plan && plan.FMCO_Address__r && plan.FMCO_Address__r.TEKO_ServiceTerritory__r) {
            this.serviceTerritoryId = plan.FMCO_Address__r.TEKO_ServiceTerritory__r.Id;
            // Récupérer les SA directement de la réponse
            this.serviceAppointments = plan.FMCO_Address__r.TEKO_ServiceTerritory__r.ServiceAppointments.edges.map(edge => edge.node);
        }
    } else if (errors) {
        this.error = errors;
    }
}
