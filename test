// calendarComponent.js
import { LightningElement, track } from 'lwc';
import { loadScript, loadStyle } from 'lightning/platformResourceLoader';
import FULLCALENDAR from '@salesforce/resourceUrl/fullcalendar'; // Static Resource

export default class CalendarComponent extends LightningElement {
    @track events = [];
    calendarInitialized = false;

    connectedCallback() {
        // Données d'exemple pour les rendez-vous
        this.events = [
            {
                id: '1',
                title: 'Rendez-vous médecin',
                start: '2025-08-13T09:00:00',
                end: '2025-08-13T10:00:00',
                backgroundColor: '#3788d8',
                borderColor: '#3788d8'
            },
            {
                id: '2',
                title: 'Réunion équipe',
                start: '2025-08-14T14:30:00',
                end: '2025-08-14T15:30:00',
                backgroundColor: '#06a59a',
                borderColor: '#06a59a'
            },
            {
                id: '3',
                title: 'Entretien client',
                start: '2025-08-15T11:00:00',
                end: '2025-08-15T12:00:00',
                backgroundColor: '#f59e0b',
                borderColor: '#f59e0b'
            }
        ];
    }

    renderedCallback() {
        if (this.calendarInitialized) return;
        this.calendarInitialized = true;

        Promise.all([
            loadStyle(this, FULLCALENDAR + '/fullcalendar.min.css'),
            loadScript(this, FULLCALENDAR + '/fullcalendar.min.js')
        ]).then(() => {
            this.initializeCalendar();
        }).catch(error => {
            console.error('Erreur lors du chargement de FullCalendar:', error);
        });
    }

    initializeCalendar() {
        const calendarEl = this.template.querySelector('.calendar');
        
        const calendar = new FullCalendar.Calendar(calendarEl, {
            initialView: 'dayGridMonth',
            headerToolbar: {
                left: 'prev,next today',
                center: 'title',
                right: 'dayGridMonth,timeGridWeek,timeGridDay'
            },
            locale: 'fr',
            events: this.events,
            eventClick: this.handleEventClick.bind(this),
            eventMouseEnter: this.handleEventMouseEnter.bind(this),
            eventMouseLeave: this.handleEventMouseLeave.bind(this),
            height: 'auto',
            eventTimeFormat: {
                hour: '2-digit',
                minute: '2-digit',
                meridiem: false
            },
            displayEventTime: true,
            eventDisplay: 'block'
        });

        calendar.render();
        this.calendar = calendar;
    }

    handleEventClick(info) {
        // Affichage du message dans la console
        console.log('=== RENDEZ-VOUS CLIQUÉ ===');
        console.log('ID:', info.event.id);
        console.log('Titre:', info.event.title);
        console.log('Date de début:', info.event.start.toLocaleString('fr-FR'));
        console.log('Date de fin:', info.event.end ? info.event.end.toLocaleString('fr-FR') : 'Non définie');
        console.log('Durée:', this.calculateDuration(info.event.start, info.event.end));
        console.log('========================');

        // Optionnel : Afficher une notification toast
        this.showToast('Rendez-vous sélectionné', `${info.event.title} - ${info.event.start.toLocaleString('fr-FR')}`);
        
        // Empêcher la propagation de l'événement
        info.jsEvent.preventDefault();
    }

    handleEventMouseEnter(info) {
        // Changer le curseur au survol
        info.el.style.cursor = 'pointer';
        info.el.style.opacity = '0.8';
    }

    handleEventMouseLeave(info) {
        // Restaurer l'apparence normale
        info.el.style.opacity = '1';
    }

    calculateDuration(start, end) {
        if (!end) return 'Durée indéterminée';
        
        const durationMs = end.getTime() - start.getTime();
        const hours = Math.floor(durationMs / (1000 * 60 * 60));
        const minutes = Math.floor((durationMs % (1000 * 60 * 60)) / (1000 * 60));
        
        if (hours > 0) {
            return `${hours}h${minutes > 0 ? ` ${minutes}min` : ''}`;
        }
        return `${minutes}min`;
    }

    showToast(title, message) {
        // Simuler une notification (à adapter selon votre environnement)
        const event = new ShowToastEvent({
            title: title,
            message: message,
            variant: 'info',
            mode: 'dismissible'
        });
        this.dispatchEvent(event);
    }

    // Méthode pour ajouter un nouveau rendez-vous (optionnel)
    addAppointment(appointmentData) {
        const newEvent = {
            id: Date.now().toString(),
            title: appointmentData.title,
            start: appointmentData.start,
            end: appointmentData.end,
            backgroundColor: appointmentData.backgroundColor || '#3788d8',
            borderColor: appointmentData.borderColor || '#3788d8'
        };
        
        this.events.push(newEvent);
        if (this.calendar) {
            this.calendar.addEvent(newEvent);
        }
        
        console.log('Nouveau rendez-vous ajouté:', newEvent);
    }
}
