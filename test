// Salesforce Duplicate Detector Extension for VSCode

// Extension manifest (package.json)
{
  "name": "salesforce-duplicate-detector",
  "displayName": "Salesforce Duplicate Detector",
  "description": "Detects duplicate elements in Salesforce metadata files",
  "version": "0.1.0",
  "engines": {
    "vscode": "^1.60.0"
  },
  "categories": [
    "Other"
  ],
  "activationEvents": [
    "onLanguage:xml",
    "workspaceContains:**/package.xml",
    "workspaceContains:**/*.xml"
  ],
  "main": "./extension.js",
  "contributes": {
    "commands": [
      {
        "command": "salesforce-duplicate-detector.scan",
        "title": "Scan for Salesforce Metadata Duplicates"
      }
    ],
    "configuration": {
      "title": "Salesforce Duplicate Detector",
      "properties": {
        "salesforceDuplicateDetector.enableAutoScan": {
          "type": "boolean",
          "default": true,
          "description": "Enable automatic scanning for duplicates when saving files"
        }
      }
    }
  }
}

// Extension main file (extension.js)
const vscode = require('vscode');
const fs = require('fs');
const path = require('path');
const xml2js = require('xml2js');

/**
 * @param {vscode.ExtensionContext} context
 */
function activate(context) {
  console.log('Salesforce Duplicate Detector is now active');

  // Register the scan command
  let scanCommand = vscode.commands.registerCommand('salesforce-duplicate-detector.scan', () => {
    scanForDuplicates();
  });
  
  // Register the file save event
  let saveListener = vscode.workspace.onDidSaveTextDocument((document) => {
    const config = vscode.workspace.getConfiguration('salesforceDuplicateDetector');
    if (config.get('enableAutoScan') && isSalesforceMetadataFile(document.fileName)) {
      scanForDuplicates();
    }
  });

  context.subscriptions.push(scanCommand, saveListener);
}

function deactivate() {}

/**
 * Checks if the file is a Salesforce metadata file
 * @param {string} fileName 
 */
function isSalesforceMetadataFile(fileName) {
  const salesforceFileTypes = [
    'package.xml',
    'CustomLabels.labels',
    'translations',
    'permissionset',
    'layout',
    'object',
    'workflow',
    'profile'
  ];
  
  return salesforceFileTypes.some(type => fileName.endsWith(type) || fileName.includes(`.${type}-meta.xml`));
}

/**
 * Scans the workspace for duplicate elements in Salesforce metadata files
 */
async function scanForDuplicates() {
  const workspaceFolders = vscode.workspace.workspaceFolders;
  if (!workspaceFolders) {
    vscode.window.showErrorMessage('No workspace folder found.');
    return;
  }
  
  const duplicatesFound = [];
  
  // Get all XML files in the workspace
  const xmlFiles = await findSalesforceMetadataFiles(workspaceFolders[0].uri.fsPath);
  
  // Process each file to check for duplicates
  for (const filePath of xmlFiles) {
    try {
      const duplicates = await checkFileForDuplicates(filePath);
      duplicatesFound.push(...duplicates.map(d => ({ ...d, filePath })));
    } catch (error) {
      console.error(`Error processing file ${filePath}:`, error);
    }
  }
  
  // Show results
  if (duplicatesFound.length > 0) {
    const outputChannel = vscode.window.createOutputChannel('Salesforce Duplicate Detector');
    outputChannel.clear();
    outputChannel.appendLine('=== Duplicate Elements Detected ===');
    
    duplicatesFound.forEach(duplicate => {
      outputChannel.appendLine(`\nFile: ${duplicate.filePath}`);
      outputChannel.appendLine(`Element: ${duplicate.element}`);
      outputChannel.appendLine(`Identifier: ${duplicate.identifier}`);
      outputChannel.appendLine(`Count: ${duplicate.count}`);
    });
    
    outputChannel.show();
    
    // Show notification
    vscode.window.showWarningMessage(
      `Found ${duplicatesFound.length} duplicate elements in Salesforce metadata.`,
      'Show Details'
    ).then(selection => {
      if (selection === 'Show Details') {
        outputChannel.show();
      }
    });
  } else {
    vscode.window.showInformationMessage('No duplicate elements found in Salesforce metadata.');
  }
}

/**
 * Finds all Salesforce metadata files in the workspace
 * @param {string} rootPath 
 */
async function findSalesforceMetadataFiles(rootPath) {
  const xmlFiles = [];
  
  // Helper function to recursively find files
  async function findXmlFiles(dirPath) {
    const entries = fs.readdirSync(dirPath, { withFileTypes: true });
    
    for (const entry of entries) {
      const fullPath = path.join(dirPath, entry.name);
      
      if (entry.isDirectory()) {
        // Skip node_modules and .git directories
        if (entry.name !== 'node_modules' && entry.name !== '.git') {
          await findXmlFiles(fullPath);
        }
      } else if (isSalesforceMetadataFile(entry.name)) {
        xmlFiles.push(fullPath);
      }
    }
  }
  
  await findXmlFiles(rootPath);
  return xmlFiles;
}

/**
 * Checks a file for duplicate elements
 * @param {string} filePath 
 */
async function checkFileForDuplicates(filePath) {
  const content = fs.readFileSync(filePath, 'utf8');
  const parser = new xml2js.Parser({ explicitArray: true });
  
  try {
    const result = await parser.parseStringPromise(content);
    return findDuplicatesInObject(result);
  } catch (error) {
    console.error(`Error parsing XML file ${filePath}:`, error);
    return [];
  }
}

/**
 * Finds duplicate elements in an XML object
 * @param {Object} obj 
 */
function findDuplicatesInObject(obj) {
  const duplicates = [];
  
  // Elements to check for duplicates based on file type
  const elementsToCheck = {
    'Package': { identifierField: 'members', elementName: 'types' },
    'CustomLabels': { identifierField: 'fullName', elementName: 'labels' },
    'CustomObject': { identifierField: 'fullName', elementName: 'fields' },
    'Profile': { identifierField: 'field', elementName: 'fieldPermissions' },
    'PermissionSet': { identifierField: 'field', elementName: 'fieldPermissions' },
    'Translations': { identifierField: 'name', elementName: 'labels' }
  };
  
  // Process the root element
  const rootElementName = Object.keys(obj)[0];
  const rootElement = obj[rootElementName];
  
  if (elementsToCheck[rootElementName]) {
    const { elementName, identifierField } = elementsToCheck[rootElementName];
    
    if (rootElement[elementName] && Array.isArray(rootElement[elementName])) {
      // Get counts of each identifier
      const counts = {};
      
      rootElement[elementName].forEach(element => {
        if (element[identifierField]) {
          const identifier = element[identifierField][0];
          counts[identifier] = (counts[identifier] || 0) + 1;
        }
      });
      
      // Find duplicates
      for (const [identifier, count] of Object.entries(counts)) {
        if (count > 1) {
          duplicates.push({
            element: elementName,
            identifier,
            count
          });
        }
      }
    }
  }
  
  return duplicates;
}

module.exports = {
  activate,
  deactivate
};
