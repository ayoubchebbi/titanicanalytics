
public class FSCO_AssignClosestPOSToTherapies_QBL implements Queueable {
    
    private List<PASCO_Therapy__c> therapies;
    
    public FSCO_AssignClosestPOSToTherapies_QBL(List<PASCO_Therapy__c> therapiesToProcess) {
        this.therapies = therapiesToProcess;
    }
    
    public void execute(QueueableContext context) {
        Set<Id> patientIds = getPatientIds(therapies);
        Set<Id> posIds = getPOSIds();
        
        Map<Id, Address> patientAddressMap = getPatientAddresses(patientIds);
        Map<Id, Address> posAddressMap = getPOSAddresses(posIds);
        
        List<PASCO_Therapy__c> therapiesToUpdate = new List<PASCO_Therapy__c>();
        
        for (PASCO_Therapy__c therapy : therapies) {
            if (therapy.PASCO_Patient__c != null && patientAddressMap.containsKey(therapy.PASCO_Patient__c)) {
                Address patientAddress = patientAddressMap.get(therapy.PASCO_Patient__c);
                Id closestPOS = findClosestPOS(patientAddress, posAddressMap, therapy.PASCO_TherapyGroup__c, posIds);
                
                if (closestPOS != null) {
                    therapy.PASCO_POSAccount__c = closestPOS;
                    therapiesToUpdate.add(therapy);
                }
            }
        }
        
        if (!therapiesToUpdate.isEmpty()) {
            update therapiesToUpdate;
        }
    }
    
    private Set<Id> getPatientIds(List<PASCO_Therapy__c> therapies) {
        Set<Id> patientIds = new Set<Id>();
        for (PASCO_Therapy__c therapy : therapies) {
            if (therapy.PASCO_Patient__c != null) {
                patientIds.add(therapy.PASCO_Patient__c);
            }
        }
        return patientIds;
    }
    
    private Set<Id> getPOSIds() {
        return new Map<Id, Account>([SELECT Id FROM Account WHERE RecordType.DeveloperName = 'ACCCO_POS']).keySet();
    }
    
    private Map<Id, Address> getPatientAddresses(Set<Id> patientIds) {
        Map<Id, Address> addressMap = new Map<Id, Address>();
        for (Address addr : [SELECT Id, Latitude, Longitude
                            FROM Address 
                            WHERE IsDefault = true 
                            AND AccountId IN :patientIds
                            AND Latitude != null AND Longitude != null]) {
            addressMap.put(addr.AccountId, addr);
        }
        return addressMap;
    }
    
    private Map<Id, Address> getPOSAddresses(Set<Id> posIds) {
        List<Account> posAccounts = [SELECT Id, PASCO_TherapyGroups__c,
                                    (SELECT Id, Latitude, Longitude 
                                     FROM Address 
                                     WHERE IsDefault = true 
                                     AND Latitude != null AND Longitude != null 
                                     LIMIT 1)
                                    FROM Account 
                                    WHERE Id IN :posIds];
        
        Map<Id, Address> posAddressMap = new Map<Id, Address>();
        for (Account pos : posAccounts) {
            if (!pos.AccountAddresses.isEmpty()) {
                posAddressMap.put(pos.Id, pos.AccountAddresses[0]);
            }
        }
        return posAddressMap;
    }
    
    private Id findClosestPOS(Address patientAddress, Map<Id, Address> posAddressMap, String therapyGroup, Set<Id> posIds) {
        List<Account> eligiblePOS = [SELECT Id, PASCO_TherapyGroups__c 
                                    FROM Account 
                                    WHERE RecordType.DeveloperName = 'ACCCO_POS' 
                                    AND PASCO_TherapyGroups__c INCLUDES (:therapyGroup)
                                    AND Id IN :posIds];
        
        if (eligiblePOS.isEmpty()) return null;
        
        Double minDistance = 999999.99;
        Id closestPOSId = null;
        
        for (Account pos : eligiblePOS) {
            Address posAddress = posAddressMap.get(pos.Id);
            if (posAddress != null) {
                Double distance = calculateDistance(patientAddress.Latitude, patientAddress.Longitude, 
                                                  posAddress.Latitude, posAddress.Longitude);
                if (distance < minDistance) {
                    minDistance = distance;
                    closestPOSId = pos.Id;
                }
            }
        }
        
        return closestPOSId;
    }
    
    private Double calculateDistance(Double lat1, Double lon1, Double lat2, Double lon2) {
        Location loc1 = Location.newInstance(lat1, lon1);
        Location loc2 = Location.newInstance(lat2, lon2);
        return Location.getDistance(loc1, loc2, 'km');
    }
}
