getExchangeableLevel({ errors, data }) {
    if (errors || !data) return;
    
    this.toggleLoading(true);
    
    if (!this.shouldProcessExchangeableLevel(data) || this._match?.productItemId !== undefined) {
        this.toggleLoading(false);
        return;
    }
    
    const edges = data.uiapi.query.PRDCO_ProductToProductPackVariance_c.edges;
    
    for (const edge of edges) {
        const matchingProduct = this.productItems.find(pi => 
            pi.productParent === edge.node.PRDCO_Product_c.Id
        );
        
        if (matchingProduct) {
            this._match = {
                productItemId: matchingProduct.id,
                productItem: matchingProduct,
                matchType: CONSTANTS.MATCH_TYPES.EXCHANGEABLE.TYPE
            };
            this.exchangeableProductItem();
            break;
        }
    }
    
    this.toggleLoading(false);
}
