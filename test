<fsapp-register-start-end-time 
    time-type="StartTime" 
    time-sheet-id={timeSheetId} 
    labels={labels} 
    select-date={selectDate}
    onstartTimeRegistered={handleStartTimeRegistered}>
</fsapp-register-start-end-time>

<fsapp-register-start-end-time 
    time-type="EndTime" 
    time-sheet-id={timeSheetId} 
    labels={labels} 
    select-date={selectDate}
    time-sheet-entry-id={endTimeEntryId}>
</fsapp-register-start-end-time>


@track endTimeEntryId;

handleStartTimeRegistered(event) {
    // Get the data from the event
    const { timeSheetEntryId, startTime } = event.detail;
    
    // Update the timeSheetEntryId for the EndTime component
    this.endTimeEntryId = timeSheetEntryId;
    
    // Optionally, you can store the startTime if needed
    this.startTimeValue = startTime;
}

// Add to your FsappRegisterStartEndTime class
@api
set timeSheetEntryId(value) {
    this._timeSheetEntryId = value;
    // If we're the EndTime component and we receive a new ID, we may need to update
    if (this.timeType === END_TIME && value) {
        // Refresh the data (if needed)
        this.refreshData();
    }
}

get timeSheetEntryId() {
    return this._timeSheetEntryId;
}

// Method to refresh data if needed
refreshData() {
    // If your wire function doesn't auto-refresh when variables change,
    // you might need to manually fetch the data again
    // This depends on how your wired function behaves
}
