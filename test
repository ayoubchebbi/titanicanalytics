// Find all options that are not in valueChecked
        this.unselectedOptions = this.options.filter(option => {
            const optionValue = option.value || option.id;
            return !this.valueChecked.includes(optionValue);
        });
// workorderHelper.js
import { LightningElement, api } from 'lwc';
import { getRecord } from 'lightning/uiRecordApi';

export default class WorkorderHelper extends LightningElement {
    @api apiValue; // { id: '...', type: '...' }

    async getWorkOrderId() {
        if (!this.apiValue || this.apiValue.type !== 'ServiceAppointment') {
            console.warn('Not a ServiceAppointment. No WorkOrderId to fetch.');
            return null;
        }

        try {
            const record = await getRecord({ 
                recordId: this.apiValue.id, 
                fields: ['ServiceAppointment.WorkOrderId'] 
            });

            const workOrderId = record.fields.WorkOrderId.value;
            console.log('Fetched WorkOrderId:', workOrderId);
            return workOrderId;

        } catch (error) {
            console.error('Error fetching WorkOrderId:', error);
            return null;
        }
    }

    connectedCallback() {
        this.getWorkOrderId().then(result => {
            if (result) {
                // Do something with the workOrderId
            }
        });
    }
}
