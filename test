import { LightningElement, api } from 'lwc';
import graphql from '@salesforce/apex/GraphQL';

export default class WorkorderFetcher extends LightningElement {
    @api apiValue;
    workOrderId;

    async connectedCallback() {
        await this.fetchWorkOrderId();
    }

    async fetchWorkOrderId() {
        if (this.apiValue?.type !== 'ServiceAppointment') {
            console.log('Not a ServiceAppointment, skipping.');
            return null;
        }

        const query = `
          query GetWorkOrderId($saId: ID!) {
            uiapi {
              query {
                ServiceAppointment(where: { Id: { eq: $saId } }) {
                  edges {
                    node {
                      WorkOrderId {
                        value
                      }
                    }
                  }
                }
              }
            }
          }
        `;

        const variables = {
            saId: this.apiValue.id
        };

        try {
            const result = await graphql(query, variables);
            const edges = result?.data?.uiapi?.query?.ServiceAppointment?.edges;

            if (edges?.length > 0) {
                this.workOrderId = edges[0].node.WorkOrderId.value;
                console.log('WorkOrderId:', this.workOrderId);
                return this.workOrderId;
            } else {
                console.log('No WorkOrder found.');
                return null;
            }

        } catch (error) {
            console.error('GraphQL Error:', error);
            return null;
        }
    }
}
